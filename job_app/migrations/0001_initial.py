# Generated by Django 4.1.7 on 2025-07-30 08:42

import job_app.model.users
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import stark_utilities.utilities


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file_name', models.FileField(blank=True, null=True, upload_to='media')),
                ('size', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assets',
            },
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_number', models.IntegerField(blank=True, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('expiry_time', models.DateTimeField(default=stark_utilities.utilities.get_otp_expirity)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'otp',
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('quantity', models.IntegerField(blank=True, db_index=True, null=True)),
                ('status', models.IntegerField(choices=[(1, '55')], default=1)),
            ],
            options={
                'db_table': 'products',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('city', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('marks', models.FloatField(blank=True, db_index=True, default=0.0, null=True)),
                ('status', models.IntegerField(choices=[(1, 'active'), (2, 'inactive'), (3, 'deleted')], default=1)),
                ('gender', models.IntegerField(choices=[(1, 'male'), (2, 'female'), (3, 'other')], default=1)),
                ('email', models.EmailField(blank=True, max_length=197, null=True, unique=True)),
            ],
            options={
                'db_table': 'student',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('mobile', models.CharField(blank=True, db_index=True, max_length=16, null=True, verbose_name='mobiles')),
                ('username', models.CharField(blank=True, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, unique=True, verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'active'), (2, 'inactive'), (3, 'deleted')], default=1)),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'superuser'), (2, 'staff')], default=2)),
                ('login_otp', models.CharField(blank=True, max_length=10, null=True)),
                ('login_otp_time', models.DateTimeField(blank=True, null=True)),
                ('otp', models.CharField(blank=True, max_length=20, null=True)),
                ('otp_time', models.DateTimeField(blank=True, null=True)),
                ('new_otp', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'user',
            },
            managers=[
                ('objects', job_app.model.users.CustomUserManager()),
            ],
        ),
    ]
